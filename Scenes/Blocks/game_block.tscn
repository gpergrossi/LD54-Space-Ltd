[gd_scene load_steps=8 format=3 uid="uid://c48jwgb4os5pd"]

[ext_resource type="Script" path="res://Scripts/game_block.gd" id="1_lexwb"]

[sub_resource type="BoxShape3D" id="BoxShape3D_wbkv7"]

[sub_resource type="Shader" id="Shader_hd4pd"]
code = "shader_type spatial;
render_mode blend_mix;

uniform float gridSize = 1.0;
uniform float gridThickness = 0.05;
uniform float gridFuzz = 0.01;
uniform float hazard = 0.0;
uniform vec4 gridColor : source_color = vec4(1.0, 1.0, 1.0, 0.5);
uniform vec4 faceColor : source_color = vec4(1.0, 1.0, 1.0, 0.0);
uniform vec3 origin = vec3(0.0, 0.0, 0.0);
uniform sampler2D scratches;

varying vec2 world_space_uv;

void vertex()
{	
	// Calculation of TANGENT and BINORMAL similar to tri-planar projection
	TANGENT = vec3(0.0, 0.0, 1.0) * abs(NORMAL.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(NORMAL.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	
	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(NORMAL.x);
	BINORMAL += vec3(0.0, 0.0, 1.0) * abs(NORMAL.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	
	vec3 basis_x = BINORMAL;
	vec3 basis_y = TANGENT;
	
    vec3 world_position = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
	vec3 pos = world_position - origin;
	float x = dot(basis_x, pos);
	float y = dot(basis_y, pos);
	
	world_space_uv = vec2(x, y);
}

void fragment() {
	vec2 coord = (world_space_uv / gridSize);
	
	float diagGridScalar = gridSize * 0.15;
	float diagThicknessScalar = gridThickness / 0.05;
	float diag = (coord.x + coord.y - diagGridScalar * 0.166667 * diagThicknessScalar) / (gridSize * diagGridScalar);
	diag = diag - floor(diag);
	float thresh = 1.0 - (0.3333 * diagThicknessScalar);
	float marginStrip = max(smoothstep(thresh - gridFuzz/diagGridScalar, thresh, diag), smoothstep(gridFuzz/diagGridScalar, 0.0, diag));
	
	coord = coord + vec2(0.5);
	coord = coord - floor(coord);
	vec2 scratch_uv = coord;
	coord = max(smoothstep(gridThickness + gridFuzz, gridThickness, coord), smoothstep(1.0 - gridThickness - gridFuzz, 1.0 - gridThickness, coord));
	float t = max(marginStrip * hazard, max(coord.x, coord.y));
	
	ALBEDO = mix(faceColor.rgb, gridColor.rgb, t);
	ALPHA =  mix(faceColor.a, gridColor.a, t);
	NORMAL_MAP = texture(scratches, scratch_uv).rgb;
	METALLIC = 0.5;
	ROUGHNESS = 0.8;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_gcmch"]
resource_local_to_scene = true
render_priority = 0
shader = SubResource("Shader_hd4pd")
shader_parameter/gridSize = 1.0
shader_parameter/gridThickness = 0.075
shader_parameter/gridFuzz = 0.005
shader_parameter/hazard = 0.0
shader_parameter/gridColor = Color(0.231373, 0.6, 0.596078, 1)
shader_parameter/faceColor = Color(0.231373, 0.6, 0.596078, 0.5)
shader_parameter/origin = Vector3(0, 0, 0)

[sub_resource type="BoxMesh" id="BoxMesh_jq8xb"]
resource_local_to_scene = true
material = SubResource("ShaderMaterial_gcmch")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_2amwy"]
resource_local_to_scene = true
albedo_color = Color(0.231373, 0.6, 0.596078, 1)
metallic = 0.45
roughness = 0.5

[sub_resource type="BoxMesh" id="BoxMesh_6sgof"]
resource_local_to_scene = true
material = SubResource("StandardMaterial3D_2amwy")
size = Vector3(0.5, 0.5, 0.5)

[node name="Block 1" type="CharacterBody3D" node_paths=PackedStringArray("transparent_block", "opaque_block")]
collision_layer = 2
collision_mask = 5
script = ExtResource("1_lexwb")
color = Color(0.231373, 0.6, 0.596078, 1)
transparent_block = NodePath("TransparentBlock")
opaque_block = NodePath("OpaqueBlock")
metadata/_edit_group_ = true

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("BoxShape3D_wbkv7")

[node name="TransparentBlock" type="MeshInstance3D" parent="."]
transform = Transform3D(0.95, 0, 0, 0, 0.95, 0, 0, 0, 0.95, 0, 0, 0)
mesh = SubResource("BoxMesh_jq8xb")
skeleton = NodePath("")

[node name="OpaqueBlock" type="MeshInstance3D" parent="."]
mesh = SubResource("BoxMesh_6sgof")
