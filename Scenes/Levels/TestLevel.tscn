[gd_scene load_steps=18 format=3 uid="uid://ciods5x7w6hvh"]

[ext_resource type="Script" path="res://Scripts/world.gd" id="1_5bw1b"]
[ext_resource type="Script" path="res://Scripts/delete_on_play.gd" id="2_vhe0t"]
[ext_resource type="PackedScene" uid="uid://d6shy3xg3m4x" path="res://Scenes/Blocks/game_block_white.tscn" id="5_kgkvm"]
[ext_resource type="PackedScene" uid="uid://c18vbl8clmii7" path="res://Scenes/Blocks/game_block_red.tscn" id="6_g27hk"]
[ext_resource type="PackedScene" uid="uid://desc6xcium7xp" path="res://Scenes/Collectables/green_collectable.tscn" id="7_7j361"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_yowko"]
albedo_color = Color(1, 0, 0, 1)

[sub_resource type="CylinderMesh" id="CylinderMesh_30y8p"]
material = SubResource("StandardMaterial3D_yowko")
top_radius = 0.0
bottom_radius = 0.25
height = 1.0

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_hgcgd"]
albedo_color = Color(0, 1, 0, 1)

[sub_resource type="CylinderMesh" id="CylinderMesh_yfb82"]
material = SubResource("StandardMaterial3D_hgcgd")
top_radius = 0.0
bottom_radius = 0.25
height = 1.0

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_wpjnr"]
albedo_color = Color(0, 0, 1, 1)

[sub_resource type="CylinderMesh" id="CylinderMesh_deykk"]
material = SubResource("StandardMaterial3D_wpjnr")
top_radius = 0.0
bottom_radius = 0.25
height = 1.0

[sub_resource type="Shader" id="Shader_ff8re"]
code = "shader_type spatial;
render_mode blend_mix;

uniform float gridSize = 1.0;
uniform float gridThickness = 0.05;
uniform float gridFuzz = 0.01;
uniform float hazard = 0.0;
uniform vec4 gridColor : source_color = vec4(1.0, 1.0, 1.0, 0.5);
uniform vec4 faceColor : source_color = vec4(1.0, 1.0, 1.0, 0.0);
uniform vec3 origin = vec3(0.0, 0.0, 0.0);

varying vec2 world_space_uv;

void vertex()
{	
	// Calculation of TANGENT and BINORMAL similar to tri-planar projection
	TANGENT = vec3(0.0, 0.0, 1.0) * abs(NORMAL.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(NORMAL.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	
	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(NORMAL.x);
	BINORMAL += vec3(0.0, 0.0, 1.0) * abs(NORMAL.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	
	vec3 basis_x = BINORMAL;
	vec3 basis_y = TANGENT;
	
    vec3 world_position = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
	vec3 pos = world_position - origin;
	float x = dot(basis_x, pos);
	float y = dot(basis_y, pos);
	
	world_space_uv = vec2(x, y);
}

void fragment() {
	vec2 coord = (world_space_uv / gridSize);
	
	float diagGridScalar = gridSize * 0.15;
	float diagThicknessScalar = gridThickness / 0.05;
	float diag = (coord.x + coord.y - diagGridScalar * 0.166667 * diagThicknessScalar) / (gridSize * diagGridScalar);
	diag = diag - floor(diag);
	float thresh = 1.0 - (0.3333 * diagThicknessScalar);
	float marginStrip = max(smoothstep(thresh - gridFuzz/diagGridScalar, thresh, diag), smoothstep(gridFuzz/diagGridScalar, 0.0, diag));
	
	coord = coord + vec2(0.5);
	coord = coord - floor(coord);
	coord = max(smoothstep(gridThickness + gridFuzz, gridThickness, coord), smoothstep(1.0 - gridThickness - gridFuzz, 1.0 - gridThickness, coord));
	float t = max(marginStrip * hazard, max(coord.x, coord.y));
		
	ALBEDO = mix(faceColor.rgb, gridColor.rgb, t);
	ALPHA =  mix(faceColor.a, gridColor.a, t);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ccojs"]
render_priority = 0
shader = SubResource("Shader_ff8re")
shader_parameter/gridSize = 1.0
shader_parameter/gridThickness = 0.05
shader_parameter/gridFuzz = 0.01
shader_parameter/hazard = 0.0
shader_parameter/gridColor = Color(0, 1, 0.831373, 0.501961)
shader_parameter/faceColor = Color(1, 1, 1, 0)
shader_parameter/origin = Vector3(0, 0, 0)

[sub_resource type="BoxMesh" id="BoxMesh_iij55"]
material = SubResource("ShaderMaterial_ccojs")
size = Vector3(7, 7, 7)

[sub_resource type="Shader" id="Shader_0e65q"]
code = "shader_type spatial;
render_mode blend_mix;

uniform float gridSize = 1.0;
uniform float gridThickness = 0.05;
uniform float gridFuzz = 0.01;
uniform float hazard = 0.0;
uniform vec4 gridColor : source_color = vec4(1.0, 1.0, 1.0, 0.5);
uniform vec4 faceColor : source_color = vec4(1.0, 1.0, 1.0, 0.0);
uniform vec3 origin = vec3(0.0, 0.0, 0.0);

varying vec2 world_space_uv;

void vertex()
{	
	// Calculation of TANGENT and BINORMAL similar to tri-planar projection
	TANGENT = vec3(0.0, 0.0, 1.0) * abs(NORMAL.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(NORMAL.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	
	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(NORMAL.x);
	BINORMAL += vec3(0.0, 0.0, 1.0) * abs(NORMAL.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	
	vec3 basis_x = BINORMAL;
	vec3 basis_y = TANGENT;
	
    vec3 world_position = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
	vec3 pos = world_position - origin;
	float x = dot(basis_x, pos);
	float y = dot(basis_y, pos);
	
	world_space_uv = vec2(x, y);
}

void fragment() {
	vec2 coord = (world_space_uv / gridSize);
	
	float diagGridScalar = gridSize * 0.15;
	float diagThicknessScalar = gridThickness / 0.05;
	float diag = (coord.x + coord.y - diagGridScalar * 0.166667 * diagThicknessScalar) / (gridSize * diagGridScalar);
	diag = diag - floor(diag);
	float thresh = 1.0 - (0.3333 * diagThicknessScalar);
	float marginStrip = max(smoothstep(thresh - gridFuzz/diagGridScalar, thresh, diag), smoothstep(gridFuzz/diagGridScalar, 0.0, diag));
	
	coord = coord + vec2(0.5);
	coord = coord - floor(coord);
	coord = max(smoothstep(gridThickness + gridFuzz, gridThickness, coord), smoothstep(1.0 - gridThickness - gridFuzz, 1.0 - gridThickness, coord));
	float t = max(marginStrip * hazard, max(coord.x, coord.y));
		
	ALBEDO = mix(faceColor.rgb, gridColor.rgb, t);
	ALPHA =  mix(faceColor.a, gridColor.a, t);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_dcd62"]
render_priority = 0
shader = SubResource("Shader_0e65q")
shader_parameter/gridSize = 1.0
shader_parameter/gridThickness = 0.025
shader_parameter/gridFuzz = 0.01
shader_parameter/hazard = 0.0
shader_parameter/gridColor = Color(0, 1, 0.784314, 0.235294)
shader_parameter/faceColor = Color(0, 1, 0.784314, 0.117647)
shader_parameter/origin = Vector3(0, 0, 0)

[sub_resource type="BoxMesh" id="BoxMesh_eritx"]
material = SubResource("ShaderMaterial_dcd62")
flip_faces = true
size = Vector3(7, 7, 7)

[node name="TestLevel" type="Node3D"]
script = ExtResource("1_5bw1b")

[node name="HideOnPlay" type="Node3D" parent="."]
script = ExtResource("2_vhe0t")

[node name="Arrow Red" type="MeshInstance3D" parent="HideOnPlay"]
transform = Transform3D(-4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0, 0, 1, 0.5, 0, 0)
visible = false
mesh = SubResource("CylinderMesh_30y8p")
skeleton = NodePath("../../..")

[node name="Arrow Green" type="MeshInstance3D" parent="HideOnPlay"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0)
visible = false
mesh = SubResource("CylinderMesh_yfb82")
skeleton = NodePath("../../..")

[node name="Arrow Blue" type="MeshInstance3D" parent="HideOnPlay"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0.5)
visible = false
mesh = SubResource("CylinderMesh_deykk")
skeleton = NodePath("../../..")

[node name="MockMapCube" type="Node3D" parent="HideOnPlay"]

[node name="Outside" type="MeshInstance3D" parent="HideOnPlay/MockMapCube"]
mesh = SubResource("BoxMesh_iij55")

[node name="Inside" type="MeshInstance3D" parent="HideOnPlay/MockMapCube"]
mesh = SubResource("BoxMesh_eritx")

[node name="Collectable" parent="." instance=ExtResource("7_7j361")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2, 2)
color = Color(1, 1, 0, 1)

[node name="GameBlock7" parent="." node_paths=PackedStringArray("world") groups=["GameBlocks"] instance=ExtResource("6_g27hk")]
transform = Transform3D(0.95, 0, 0, 0, 0.95, 0, 0, 0, 0.95, 0, 2, 1)
world = NodePath("..")

[node name="GameBlock9" parent="." node_paths=PackedStringArray("world") groups=["GameBlocks"] instance=ExtResource("6_g27hk")]
transform = Transform3D(0.95, 0, 0, 0, 0.95, 0, 0, 0, 0.95, 1, 2, 2.23517e-08)
world = NodePath("..")

[node name="GameBlock11" parent="." node_paths=PackedStringArray("world") groups=["GameBlocks"] instance=ExtResource("6_g27hk")]
transform = Transform3D(0.95, 0, 0, 0, 0.95, 0, 0, 0, 0.95, 0, 2, -1)
world = NodePath("..")

[node name="GameBlock13" parent="." node_paths=PackedStringArray("world") groups=["GameBlocks"] instance=ExtResource("6_g27hk")]
transform = Transform3D(0.95, 0, 0, 0, 0.95, 0, 0, 0, 0.95, -3, 2, 0)
world = NodePath("..")

[node name="GameBlock" parent="." node_paths=PackedStringArray("world") groups=["GameBlocks"] instance=ExtResource("5_kgkvm")]
transform = Transform3D(0.95, 0, 0, 0, 0.95, 0, 0, 0, 0.95, 0, 4, 0)
world = NodePath("..")

[node name="GameBlock2" parent="." node_paths=PackedStringArray("world") groups=["GameBlocks"] instance=ExtResource("5_kgkvm")]
transform = Transform3D(0.95, 0, 0, 0, 0.95, 0, 0, 0, 0.95, 0, 3, 0)
world = NodePath("..")

[node name="GameBlock3" parent="." node_paths=PackedStringArray("world") groups=["GameBlocks"] instance=ExtResource("5_kgkvm")]
transform = Transform3D(0.95, 0, 0, 0, 0.95, 0, 0, 0, 0.95, 0, 2, 0)
world = NodePath("..")

[node name="GameBlock4" parent="." node_paths=PackedStringArray("world") groups=["GameBlocks"] instance=ExtResource("5_kgkvm")]
transform = Transform3D(0.95, 0, 0, 0, 0.95, 0, 0, 0, 0.95, -1, 2, 0)
world = NodePath("..")
